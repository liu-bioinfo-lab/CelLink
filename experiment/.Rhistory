knitr::opts_chunk$set(echo = TRUE)
library(rhdf5)
file_path <- "/Users/luosanj/Desktop/project2/data/HPAP024-AAB-18y-M-H_1_2_2-OCT/i_mat.h5"
data <- h5read(file_path, "matrix")
metadata <- read.csv("/Users/luosanj/Desktop/project2/data/HPAP024-AAB-18y-M-H_1_2_2-OCT/i_obs.csv")
features <- read.csv("/Users/luosanj/Desktop/project2/data/HPAP024-AAB-18y-M-H_1_2_2-OCT/i_var.csv")
spatial = read.csv("/Users/luosanj/Desktop/project2/data/HPAP024-AAB-18y-M-H_1_2_2-OCT/i_spatial.csv")
library(Seurat)
library(Matrix)
sparse_matrix <- Matrix(data, sparse = TRUE)
# Convert the matrix to a data frame if it's not already
#expression_matrix <- as.data.frame(data)
rownames(sparse_matrix) <- features$Unnamed..0
colnames(sparse_matrix) <- paste("cell", 1:ncol(sparse_matrix), sep = "_")
# Now, assign these cell names to the row names of the metadata dataframe
rownames(metadata) <- colnames(sparse_matrix)
# Create a Seurat object
seurat_object <- CreateSeuratObject(
counts = sparse_matrix,
project = "d024"
)
# Adding metadata, ensure rownames of metadata match the colnames of the expression matrix
seurat_object <- AddMetaData(seurat_object, metadata = metadata)
# If features data contains gene information, set it as features (rownames) of the Seurat object
rownames(seurat_object) <- features$Unnamed..0  # Adjust 'Unnamed..0' to the column name in features CSV
seurat_object[["RNA"]] <- CreateAssayObject(counts = sparse_matrix)
spatial_factors <- data.frame(
ratio = 1,  # Conversion factor from pixels (or other units) to micrometers
tol = 5     # Tolerance factor
)
spatial_coord = spatial[c("X_coord", "Y_coord")]
# build cellchat object
library(CellChat)
rownames(data) <- features$Unnamed..0
cellchat <- createCellChat(object = data, meta = metadata, group.by = "cell_type",
datatype = "spatial", coordinates = as.matrix(spatial_coord), spatial.factors = spatial_factors)
CellChatDB <- CellChatDB.human
CellChatDB_use <- subsetDB(CellChatDB, search = "Secreted Signaling", key = "annotation")
cellchat@DB <- CellChatDB_use
options(future.globals.maxSize = 4000 * 1024^2)
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat, variable.both = F)
ptm = Sys.time()
cellchat <- computeCommunProb(cellchat, type = "truncatedMean", trim = 0.1,
distance.use = FALSE, interaction.range = 250,
contact.dependent = TRUE, contact.range = 100)
cellchat <- filterCommunication(cellchat, min.cells = 10)
seurat_object
cellchat <- filterCommunication(cellchat, min.cells = 10)
df.net <- subsetCommunication(cellchat, signaling = c('GCG', 'INSULIN', 'IGF', 'GIPR'))
library(tidyr)
lig <- unique(df.net$ligand)
rec <- unique(df.net$receptor)
ligands_seurat <- subset(seurat_object, features = lig)
df.net$receptor <- as.character(df.net$receptor)
df.net_expanded <- df.net %>%
mutate(receptor = strsplit(receptor, ":")) %>%
unnest(receptor)
# Now re-identifying the unique receptors
rec <- unique(df.net_expanded$receptor)
receptors_seurat <- subset(seurat_object, features = rec)
# Calculate average expression for ligands by cell type
avg_lig_expr <- AverageExpression(ligands_seurat, group.by = "cell_type", return.seurat = FALSE)
# Calculate average expression for receptors by cell type
avg_rec_expr <- AverageExpression(receptors_seurat, group.by = "cell_type", return.seurat = FALSE)
# Extract the receptor names that have expression data
valid_receptors <- rownames(avg_rec_expr$RNA)
# Filter df.net_expanded to only include rows where the receptor exists in valid_receptors
df.net <- df.net_expanded[df.net_expanded$receptor %in% valid_receptors, ]
df.net <- as.data.frame(df.net)
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@layers$counts > 0)
ligands_seurat@assays$RNA@layers$counts
ligands_seurat@assays$RNA@layers
ligands_seurat@assays
ligands_seurat@assays$RNA
ligands_seurat@assays$RNA@counts
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@counts > 0)
ligand_expr_proportion <- ligand_expr_proportion %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(-ligand, names_to = "cell", values_to = "expressed") %>%
left_join(ligands_seurat@meta.data, by = c("cell" = "rownames")) %>%
group_by(ligand, cell_type) %>%
summarize(prop_expressed = mean(expressed), .groups = "drop")
library(tibble)
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@counts > 0)
ligand_expr_proportion <- ligand_expr_proportion %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(-ligand, names_to = "cell", values_to = "expressed") %>%
left_join(ligands_seurat@meta.data, by = c("cell" = "rownames")) %>%
group_by(ligand, cell_type) %>%
summarize(prop_expressed = mean(expressed), .groups = "drop")
ligand_expr_proportion
dim(ligand_expr_proportion)
library(tibble)
ligand_expr_proportion_long <- as.data.frame(ligand_expr_proportion) %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(
cols = -ligand,
names_to = "cell",
values_to = "expressed"
)
ligand_expr_proportion_long
ligands_seurat@meta.data
library(tibble)
ligand_expr_proportion_long <- as.data.frame(ligand_expr_proportion) %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(
cols = -ligand,
names_to = "cell",
values_to = "expressed"
)
# Ensure metadata rownames are preserved
metadata <- ligands_seurat@meta.data
# Add a cell_type column to ligand expression data
ligand_expr_proportion_long <- ligand_expr_proportion_long %>%
mutate(cell_type = metadata[cell, "cell_type"])
ligand_expr_proportion_long
# Group and calculate proportions of expressed ligands per cell type
ligand_expr_proportion_summary <- ligand_expr_proportion_long %>%
group_by(ligand, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
# Filter based on 10% threshold
ligand_expr_proportion_filtered <- ligand_expr_proportion_summary %>%
filter(prop_expressed >= 0.1)
ligand_expr_proportion_summary <- ligand_expr_proportion_long %>%
group_by(ligand, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
# Filter based on 10% threshold
ligand_expr_proportion_filtered <- ligand_expr_proportion_summary %>%
filter(prop_expressed >= 0.1)
ligand_expr_proportion_filtered
ligand_expr_proportion_summary
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@layers$counts > 0) %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(
cols = -ligand,
names_to = "cell",
values_to = "expressed"
) %>%
mutate(cell_type = ligands_seurat@meta.data[cell, "cell_type"]) %>%
group_by(ligand, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@$counts > 0) %>%
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@counts > 0) %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(
cols = -ligand,
names_to = "cell",
values_to = "expressed"
) %>%
mutate(cell_type = ligands_seurat@meta.data[cell, "cell_type"]) %>%
group_by(ligand, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
ligand_expr_proportion <- as.data.frame(ligands_seurat@assays$RNA@counts > 0) %>%
rownames_to_column(var = "ligand") %>%
pivot_longer(
cols = -ligand,
names_to = "cell",
values_to = "expressed"
) %>%
mutate(cell_type = ligands_seurat@meta.data[cell, "cell_type"]) %>%
group_by(ligand, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
receptor_expr_proportion <- as.data.frame(receptors_seurat@assays$RNA@counts > 0) %>%
rownames_to_column(var = "receptor") %>%
pivot_longer(
cols = -receptor,
names_to = "cell",
values_to = "expressed"
) %>%
mutate(cell_type = receptors_seurat@meta.data[cell, "cell_type"]) %>%
group_by(receptor, cell_type) %>%
summarize(
prop_expressed = mean(expressed, na.rm = TRUE),
.groups = "drop"
)
df.net <- df.net %>%
left_join(ligand_expr_proportion, by = c("ligand" = "ligand", "source" = "cell_type")) %>%
rename(ligand_prop_expressed = prop_expressed) %>%
left_join(receptor_expr_proportion, by = c("receptor" = "receptor", "target" = "cell_type")) %>%
rename(receptor_prop_expressed = prop_expressed)
df.net_filtered <- df.net %>%
filter(ligand_prop_expressed >= 0.1 & receptor_prop_expressed >= 0.1)
df.net
ligand_expr_proportion
df.net_filtered
# Ensure the function includes lig_expr and rec_expr as parameters if not done yet
filter_lig_rec <- function(ligand, receptor, sct, rct) {
receptor_subunits <- unlist(strsplit(receptor, ":"))
# Get expression levels for ligand
ligand_expr <- avg_lig_expr$RNA[ligand, sct]
if(ligand_expr < 0.01){
return(FALSE)
}
# Initialize logical vector for receptor results
receptor_results <- logical(length(receptor_subunits))
for (i in seq_along(receptor_subunits)) {
subunit <- receptor_subunits[i]
receptor_expr <- avg_rec_expr$RNA[receptor, rct]
receptor_results[i] <- receptor_expr
}
all(receptor_results >= 0.01)
}
# Modify the apply function to pass the expression matrices
logical_vector <- apply(df.net, 1, function(x) filter_lig_rec(x["ligand"], x["receptor"], x["source"], x["target"]))
dfnet_filter <- df.net[logical_vector, ]
dfnet_filter
